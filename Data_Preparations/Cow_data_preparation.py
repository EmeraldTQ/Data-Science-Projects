# -*- coding: utf-8 -*-
"""P1_Temp_Data_Preparation_Draft_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-e7lGhkCj1R38mqyGoz2gQfP8DnxTPNy
"""

from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

root_directory = '/content/drive/MyDrive/Komilo_proj/Datasets'
fname = 'P1_Temperature_Data'
appended_data = pd.read_excel(f'{root_directory}/{fname}.xlsx')

appended_data = pd.read_excel(f'{root_directory}/{fname}.xlsx')
appended_data.columns = ['Date', 'Time', 'Env_temp', 'Cow_temp', 'Status_1', 'Status_2']

appended_data

missing_status_1 = appended_data[appended_data[['Status_1']].isnull().values]
missing_status_1
len(missing_status_1)

missing_status_2 = appended_data[appended_data[['Status_2']].isnull().values]
missing_status_2
len(missing_status_2)

appended_data.Status_1.value_counts(dropna=False)

appended_data.Status_2.value_counts(dropna=False)

if 'filename' in appended_data.columns:
    cleaned_df = appended_data.drop('filename', axis=1).dropna(subset=['Status_1', 'Status_2','Time'])
else:
    cleaned_df = appended_data.dropna(subset=['Status_1', 'Status_2','Time'])

cleaned_df.Status_1 = cleaned_df.Status_1.apply(str.upper)
cleaned_df.Status_1.value_counts(dropna=False)

cleaned_df.Status_2 = cleaned_df.Status_2.apply(str.upper)
cleaned_df.Status_2.value_counts(dropna=False)

# To delete a single column
appended_data = appended_data.drop('Status_2', axis=1)

appended_data

cleaned_df = cleaned_df[~cleaned_df.Status_1.isin(['864', '1','2'])]
cleaned_df.Status_1 = cleaned_df.Status_1.replace({'WALKING':'MOVING'})
cleaned_df.Status_1 = cleaned_df.Status_1.replace({'SITTTING':'SITTING',
                                               'REMINATING':'RUMINATING','RUMINTAING':'RUMINATING'})

cleaned_df.Status_1.value_counts(dropna=False)

cleaned_df.Status_1.value_counts(dropna=False)

missing_time = cleaned_df[cleaned_df['Time'].isnull().values]
missing_time
len(missing_time)

cleaned_df.describe(include='all')

print(appended_data.columns)

print(appended_data.head())

print(appended_data.info())

print(appended_data.describe())

print(appended_data)

# Drop rows where either Status_1 or Status_2 has missing values
appended_data = appended_data.dropna(subset=['Status_1'])

print(appended_data.head())

print(appended_data.tail())

print(len(appended_data))

print(appended_data.sample(10))

appended_data.rename(columns={'Status_1': 'Status'}, inplace=True)

appended_data

unique_status = appended_data['Status'].unique()
print("Unique statuses:", unique_status)

unique_status = appended_data['Status'].unique()
status_counts = appended_data['Status'].value_counts()
missing_values = appended_data['Status'].isna().sum()

print("Unique statuses:", unique_status)
print("\nStatus counts:")
print(status_counts)
print(f"\nTotal rows: {len(appended_data)}")
print(f"Missing values in Status column: {missing_values}")

import matplotlib.pyplot as plt

status_counts.plot(kind='bar', title='Distribution of Statuses', color='skyblue')
plt.xlabel('Status')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

appended_data['Status'] = appended_data['Status'].str.strip()

appended_data['Status'] = appended_data['Status'].str.title()

unique_status = appended_data['Status'].unique()
status_counts = appended_data['Status'].value_counts()

print("Unique statuses:", unique_status)
print("\nStatus counts:")
print(status_counts)

status_counts.plot(kind='bar', title='Distribution of Statuses', color='skyblue')
plt.xlabel('Status')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

appended_data['Status'] = appended_data['Status'].replace({
    'Drinking': 'Eating',    # Merge 'Drinking' into 'Eating'
    "Walking'": 'Walking',  # Fix incorrect label
    'walking': 'Walking',   # Ensure consistency with case
})

unique_status = appended_data['Status'].unique()
print("Unique statuses after cleaning:", unique_status)

status_counts = appended_data['Status'].value_counts()
print("\nStatus counts after cleaning:")
print(status_counts)

status_counts.plot(kind='bar', title='Movements of Cow no.1', color='red')
plt.xlabel('Movement Status')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.figure(figsize=(3, 0.06))
plt.show()

